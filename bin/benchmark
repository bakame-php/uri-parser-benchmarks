#!/usr/bin/env php
<?php

error_reporting(-1);
ini_set('display_errors', '1');

require dirname(__DIR__).'/vendor/autoload.php';

/**
 * Convert memory usage in KB or MB
 *
 * @see http://php.net/manual/en/function.memory-get-usage.php#96280
 *
 * @param  int $size
 *
 * @return string
 */
function convert($size)
{
    return @round($size / pow(1024, ($i = floor(log($size, 1024)))), 2)
        .' '
        .['b','kb','mb','gb','tb','pb'][$i];
}

/**
 * Generate an URL
 *
 * @param int $count
 *
 * @return Generator
 */
function generateUri($count, $uri)
{
    for ($i = 0; $i < $count; ++$i) {
        yield $uri;
    }
}

/**
 * Benchmark League\Uri\UriParser
 *
 * @param int $count The number of URI to parse
 * @param string $uri The URI to parse
 *
 * @return float the benchmark duration
 */
function benchmarkLeagueUriParser($count, $uri)
{
    $start = microtime(true);
    $memory = memory_get_usage();
    $uriParser = new League\Uri\UriParser();
    foreach (generateUri($count, $uri) as $url) {
        $uriParser->parse($url);
    }

    return [
        'memory' => memory_get_usage() - $memory,
        'duration' => microtime(true) - $start,
    ];
}

/**
 * Benchmark Zend\Uri\Uri::parse method
 *
 * @param int $count The number of URI to parse
 * @param string $uri The URI to parse
 *
 * @return float the benchmark duration
 */
function benchmarkZendUriParser($count, $uri)
{
    $start = microtime(true);
    $memory = memory_get_usage();
    $uriParser = new Zend\Uri\Uri(null);
    foreach (generateUri($count, $uri) as $url) {
        $uriParser->parse($url);
    }

    return [
        'memory' => memory_get_usage() - $memory,
        'duration' => microtime(true) - $start,
    ];
}

/**
 * Benchmark PHP's native parse_url functiln
 *
 * @param int $count The number of URI to parse
 * @param string $uri The URI to parse
 *
 * @return float the benchmark duration
 */
function benchmarkNativeParseUrlFunction($count, $uri)
{
    $start = microtime(true);
    $memory = memory_get_usage();
    foreach (generateUri($count, $uri) as $url) {
        parse_url($url);
    }

    return [
        'memory' => memory_get_usage() - $memory,
        'duration' => microtime(true) - $start,
    ];
}

$parserList = [
    'native' => ['name' => 'parse_url', 'test' => 'benchmarkNativeParseUrlFunction'],
    'league' => ['name' => 'League\Uri\UriParser', 'test' => 'benchmarkLeagueUriParser'],
    'zend' => ['name' => 'Zend\Uri\Uri', 'test' => 'benchmarkZendUriParser'],
];

$opts = filter_var_array(
    array_replace(
        ['parser' => 'native', 'nb' => 100, 'iteration' => 3, 'uri' => ''],
        getopt("", ['parser::', 'nb::', 'iteration::', 'uri::', 'help'])
    ),
    [
        'parser' => [
            'filter' => FILTER_VALIDATE_REGEXP,
            'options' => ['regexp' => '/^(league|native|zend)$/', 'default' => 'native'],
            ],
        'nb' => [
            'filter' => FILTER_VALIDATE_INT,
            'options' => ['min_range' => 1, 'default' => 100],
        ],
        'iteration' => [
            'filter' => FILTER_VALIDATE_INT,
            'options' => ['min_range' => 1, 'max_range' => 10, 'default' => 3],
        ],
        'uri' => FILTER_UNSAFE_RAW,
        'help' => FILTER_VALIDATE_BOOLEAN,
    ]
);

$yellow = chr(27)."[33m";
$green  = chr(27)."[32m";
$cyan   = chr(27)."[36m";
$reset  = chr(27)."[0m";
$redbg  = chr(27)."[41m";
if (isset($opts['help'])) {
    $script = basename(__FILE__);
    $text = <<<EOF

This is a simple benchmark script to evaluate the overhead
of using a PHP land URI parser vs PHP native parse_url
=====

Simple Usage:

$yellow php $script --parser=zend --iteration=3 --nb=1000 --uri=http://example.com $reset

$green--parser$reset    select the parser to be benchmarked: {$green}zend{$reset}, {$green}league{$reset}, {$green}native{$reset} ({$yellow}default:$reset native)
$green--iteration$reset select the number of iteration ({$yellow}default:$reset 3)
$green--uri$reset       submit your own uri ({$yellow}default:$reset internal uri given)
$green--nb$reset        submit the number of time the uri must be parse ({$yellow}default:$reset 100)
$green--help$reset      show the following help message
EOF;
    echo $text, PHP_EOL;
    die(0);
}

if (!isset($opts['uri']) || empty($opts['uri'])) {
    $opts['uri'] = 'http://cnn.example.com&story=breaking_news:pass@10.0.0.1/top_story.htm?q=v&q=b#~toto';
}

$parser = $parserList[$opts['parser']];
$method = $parser['test'];
$res = ['memory' => [], 'duration' => []];
for ($i = 0; $i < $opts['iteration']; ++$i) {
    try {
        $test = $method($opts['nb'], $opts['uri']);
        $res['memory'][$i] = $test['memory'];
        $res['duration'][$i] = $test['duration'];
    } catch (Exception $e) {
        $text = <<<EOF

The submitted uri $yellow{$opts['uri']}$reset could not be parse by $green{$parser['name']}$reset
The Parser issue the following error: $redbg {$e->getMessage()} $reset
EOF;
        echo $text, PHP_EOL;
        die(65);
    }
}
$avgDuration = array_sum($res['duration']) / $opts['iteration'];
$maxDuration = max($res['duration']);
$minDuration = min($res['duration']);
$avgMemory = array_sum($res['memory']) / $opts['iteration'];
$maxMemory = max($res['memory']);
$minMemory = min($res['memory']);
echo PHP_EOL
    ." $yellow----------------------------$reset ".PHP_EOL
    ." $yellow|$reset ".$green.$parser['name'].$reset.' parser benchmark'.PHP_EOL
    ." $yellow----------------------------$reset ".PHP_EOL
    .PHP_EOL
    ." The benchmark is run ".$yellow.$opts['iteration'].$reset." times".PHP_EOL
    ." The URI ".$yellow.$opts['uri'].$reset." is parsed ".$green.$opts['nb'].$reset." times".PHP_EOL
    ." The following duration are recorded:".PHP_EOL
    ." Max duration: ".$cyan.$maxDuration." s".$reset.PHP_EOL
    ." Min duration: ".$cyan.$minDuration." s".$reset.PHP_EOL
    ." Avg duration: ".$cyan.$avgDuration." s".$reset.PHP_EOL
    ." The following memory usage are recorded:".PHP_EOL
    ." Max memory: ".$cyan.convert($maxMemory).$reset.PHP_EOL
    ." Min memory: ".$cyan.convert($minMemory).$reset.PHP_EOL
    ." Avg memory: ".$cyan.convert($avgMemory).$reset.PHP_EOL;
die(0);
