#!/usr/bin/env php
<?php

require __DIR__.'/common.php';

/**
 * Convert memory usage in KB or MB
 *
 * @see http://php.net/manual/en/function.memory-get-usage.php#96280
 *
 * @param  int $size
 *
 * @return string
 */
function convert($size)
{
    $offset = log($size, 1024);
    $offset = floor($offset);
    $div = pow(1024, $offset);
    $unitList = ['b', 'kb', 'mb', 'gb', 'tb', 'pb'];
    if (!array_key_exists($offset, $unitList)) {
        return $size.' b';
    }

    return round($size / $div, 2).' '.$unitList[$offset];
}

$opts = filter_var_array(
    array_replace(
        [
            'parser' => 'native',
            'uri' => '',
            'nb' => 100,
            'iteration' => 3,
        ],
        getopt("", ['parser::', 'nb::', 'iteration::', 'uri::', 'help'])
    ),
    [
        'parser' => $drivers->collectionFilter(),
        'uri' => FILTER_UNSAFE_RAW,
        'nb' => [
            'filter' => FILTER_VALIDATE_INT,
            'options' => ['min_range' => 1, 'default' => 100],
        ],
        'iteration' => [
            'filter' => FILTER_VALIDATE_INT,
            'options' => ['min_range' => 1, 'max_range' => 10, 'default' => 3],
        ],
        'help' => FILTER_VALIDATE_BOOLEAN,
    ]
);

if (isset($opts['help'])) {
    $script = basename(__FILE__);
    $text = <<<EOF

This is a simple benchmark script to evaluate the overhead
of using a PHP land URI parser vs PHP native parse_url
=====

Simple Usage:

$yellow php $script --parser=zend --iteration=3 --nb=1000 --uri=http://example.com $reset

$green--parser$reset    select the parser to be benchmarked: {$green}pear{$reset}, {$green}riimu{$reset}, {$green}zend{$reset}, {$green}league{$reset}, {$green}native{$reset} ({$yellow}default:$reset native)
$green--uri$reset       submit your own uri ({$yellow}default:$reset $uri)
$green--iteration$reset select the number of iteration ({$yellow}default:$reset 3)
$green--nb$reset        submit the number of time the uri must be parse ({$yellow}default:$reset 100)
$green--help$reset      show the following help message
EOF;
    echo $text, PHP_EOL;
    die(0);
}

if (isset($opts['uri']) && !empty($opts['uri'])) {
    $uri = $opts['uri'];
}

$parser = $drivers->get($opts['parser']);

$res = ['memory' => [], 'duration' => []];
try {
    for ($i = 0; $i < $opts['iteration']; ++$i) {
        $test = $parser->benchmark($opts['nb'], $uri);
        $res['memory'][$i] = $test['memory'];
        $res['duration'][$i] = $test['duration'];
    }
} catch (Exception $e) {
        $text = <<<EOF

The submitted uri $yellow$uri$reset could not be parse by $green{$parser->getParserName()}$reset
The Parser issue the following error: $redbg {$e->getMessage()} $reset
EOF;
    echo $text, PHP_EOL;
    die(65);
}
$avgDuration = array_sum($res['duration']) / $opts['iteration'];
$maxDuration = max($res['duration']);
$minDuration = min($res['duration']);
$avgMemory = array_sum($res['memory']) / $opts['iteration'];
$maxMemory = max($res['memory']);
$minMemory = min($res['memory']);
echo PHP_EOL
    ." $yellow----------------------------$reset ".PHP_EOL
    ." $yellow|$reset ".$green.$parser->getParserName().$reset.' parser benchmark'.PHP_EOL
    ." $yellow----------------------------$reset ".PHP_EOL
    .PHP_EOL
    ." The benchmark is run ".$yellow.$opts['iteration'].$reset." times".PHP_EOL
    ." The URI ".$yellow.$uri.$reset." is parsed ".$green.$opts['nb'].$reset." times".PHP_EOL
    ." The following duration are recorded:".PHP_EOL
    ." Max duration: ".$cyan.$maxDuration." s".$reset.PHP_EOL
    ." Min duration: ".$cyan.$minDuration." s".$reset.PHP_EOL
    ." Avg duration: ".$cyan.$avgDuration." s".$reset.PHP_EOL
    ." The following memory usage are recorded:".PHP_EOL
    ." Max memory: ".$cyan.convert($maxMemory).$reset.PHP_EOL
    ." Min memory: ".$cyan.convert($minMemory).$reset.PHP_EOL
    ." Avg memory: ".$cyan.convert($avgMemory).$reset.PHP_EOL;
die(0);
